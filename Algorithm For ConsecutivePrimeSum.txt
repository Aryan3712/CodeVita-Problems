		Algorithm for Consecutive Prime Sum (TCS CodeVita Problem)
	Runtime for this Algorithm for a limit of 5000 numbers = 0.261 seconds

		  >>>Consecutive Prime Sum - TCS CodeVita Problem<<<

Some prime numbers can be expressed as a sum of other consecutive prime numbers. 
For example 5 = 2 + 3, 17 = 2 + 3 + 5 + 7, 41 = 2 + 3 + 5 + 7 + 11 + 13. 
Your task is to find out how many prime numbers which satisfy this property 
are present in the range 3 to N subject to a constraint that summation 
should always start with number 2.
Write code to find out the number of prime numbers that satisfy 
the above-mentioned property in a given range.
Input Format: First line contains a number N
Output Format: Print the total number of all such prime numbers 
which are less than or equal to N.
Constraints: 2<N<=12,000,000,000
Sample output:
Input       Output
20          2           5  = 2+3
                        17 = 2+3+5+7
15          1           5  = 2+3


Algorithm>>>

Step 1: we generate all the primes under the given limit and store them in any data structure

Step 2: we fetch the maximum prime number from the data structure and check if it can be obtained by adding the numbers of the Arraylist 
	starting from the minimum prime number 2 present in the data Structure

Step 3: if a number is obtained from the sum of primes(starting from 2+3+...)
	we increase counter by 1 and  break the loop

Step 4: perform step 2 till the minimum prime number 3 is left in the ArrayList (since 	before 3, 5 was the last number that could be obtained from the sum of 2 + 3 i.e 	we need not to check for 3 and 2)

>>following functions are made in the program, refer to them for a more clear idea

>>functions in main()
  1. allPrimes() - returning an ArrayList of all Primes under the given limit
  2. primesWithinLimit() - returning the count of the prime numbers made from the sum of 			   primes
>>allPrimes()   //Called from main()
	checks and stores all the primes under the given limit in an ArrayList and 	returns the same ArrayList

>>isPrime()    //called from allPrimes()
	checks and returns true if a number is prime

>>primesWithinLimit()    //called from main()
	returns the count of the numbers made from the sum of primes
	
>>sendMax()	//called from primesWithinLimit()
	returns the maximum prime number present in the ArrayList to the calling function
	and also removes the number from the Original list everytime called
	
